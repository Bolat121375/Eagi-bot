from aiogram import types, Dispatcher
import aiofiles
import os
from utils import summarize_file

UPLOAD_DIR = "uploaded_files"
os.makedirs(UPLOAD_DIR, exist_ok=True)

async def start_cmd(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –æ–±–º–µ–Ω–∞ —É—á–µ–±–Ω—ã–º–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º–∏ üìö. –ü—Ä–∏—à–ª–∏ —Ñ–∞–π–ª, —á—Ç–æ–±—ã –∑–∞–≥—Ä—É–∑–∏—Ç—å –µ–≥–æ.")

async def handle_file(message: types.Message):
    file = message.document
    file_name = file.file_name
    file_path = os.path.join(UPLOAD_DIR, file_name)

    await message.document.download(destination_file=file_path)
    await message.answer(f"–§–∞–π–ª '{file_name}' —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω!")

    summary = await summarize_file(file_path)
    if summary:
        await message.answer(f"üìÑ –ö—Ä–∞—Ç–∫–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ:\n{summary}")
    else:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫—Ä–∞—Ç–∫–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —Ñ–∞–π–ª–∞.")

def register_handlers(dp: Dispatcher):
    dp.register_message_handler(start_cmd, commands=["start"])
    dp.register_message_handler(handle_file, content_types=types.ContentType.DOCUMENT)
